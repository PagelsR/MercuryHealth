name: Deploy-Environment-Single

on:
  workflow_call:
    inputs:
      resource-group-base-name:
        description: 'Resource Group base name'
        default: 'rg-mercuryhealth'
        required: true
        type: string
      environment-suffix:
        description: 'The suffix to be used for the current environment'
        default: 'dev'
        required: true
        type: string
      resource-group-location:
        description: 'Azure region for the deployed resources'
        default: 'eastus'
        required: true
        type: string
      approval-required:
        description: 'Approval needed to deploy to environment'
        default: true
        required: true
        type: boolean        
    secrets:
      azure-credentials:
        description: 'Credentials used to log into Azure for deployment of resources'
        required: true
      cloudflare-api-token:
        description: 'Credentials used for CloudFlare resources'
        required: true
      cloudflare-zone-id:
        description: 'Credentials used for CloudFlare resources'
        required: true
      github-accesstoken:
        description: 'Publish HTML report to GitHub Pages'
        required: true
      personal-accesstoken:
        description: 'Publish HTML report to GitHub Pages'
        required: true        
jobs:
  ###################################################################
  # Deployment Stage - Infrastructure
  ###################################################################
  deploy_infrastructure:
    runs-on: ubuntu-latest
    outputs:
      output_loadTestsName: ${{ steps.Infra.outputs.out_loadTestsName }}
      output_apiServiceName: ${{ steps.Infra.outputs.out_apiServiceName }}
      output_apimSubscriptionKey: ${{ steps.Infra.outputs.out_apimSubscriptionKey }}
      output_webSiteName: ${{ steps.Infra.outputs.out_webSiteName }}
      output_functionAppName: ${{ steps.Infra.outputs.out_functionAppName }}
      output_sqlserverFQName: ${{ steps.Infra.outputs.out_sqlserverFQName }}
      output_releaseAnnotationGuidID: ${{ steps.Infra.outputs.out_releaseAnnotationGuidID }}
      output_appInsightsApplicationId: ${{ steps.Infra.outputs.out_appInsightsApplicationId }}
      output_appInsightsAPIApplicationId: ${{ steps.Infra.outputs.out_appInsightsAPIApplicationId }}
      output_secretConnectionString: ${{ steps.Infra.outputs.out_secretConnectionString }}
      output_keyvaultName: ${{ steps.Infra.outputs.out_keyvaultName }}

    name: Deploy Infrastructure
    env:
      Azure_Resource_GroupName: ${{ inputs.resource-group-base-name }}-${{ inputs.environment-suffix }}
      Azure_Resource_GroupLocation: ${{ inputs.resource-group-location}}
      Deployed_Environment: ${{ inputs.environment-suffix }}

      # Used for Demos only. Used for Soft Delete Purge
      APIM_SoftDeleted: 'apim-okhgzqoexg6jy'
      APPCS_SoftDeleted: 'appcs-okhgzqoexg6jy'
   
    permissions:
      contents: read
    #  packages: write

    # Identify any jobs that must complete successfully before this job will run.
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.azure-credentials }}

    - name: Ensure Resource Group Exists
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          #!/bin/bash
          az group create --name ${{ env.Azure_Resource_GroupName }} --location ${{ inputs.resource-group-location }}

    - name: Ensure Resource Group is UnLocked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }}
          
    - name: Download Build Artifact-Infrastructure
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.IaC
        path: ${{ github.workspace }}/MercuryHealth.IaC

    - name: Install Bicep
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep
        bicep --version

    - name: Purge soft-deleted instance of APIM
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az rest --method get --header "Accept=application/json" -u 'https://management.azure.com/subscriptions/295e777c-2a1b-456a-989e-3c9b15d52a8e/providers/Microsoft.ApiManagement/deletedservices?api-version=2022-09-01-preview'
          az rest --method delete --header "Accept=application/json" -u 'https://management.azure.com/subscriptions/295e777c-2a1b-456a-989e-3c9b15d52a8e/providers/Microsoft.ApiManagement/locations/${{ env.Azure_Resource_GroupLocation }}/deletedservices/${{ env.APIM_SoftDeleted }}?api-version=2022-09-01-preview'

    - name: Purge soft-deleted instance of App Config
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az rest --method get --header "Accept=application/json" -u 'https://management.azure.com/subscriptions/295e777c-2a1b-456a-989e-3c9b15d52a8e/providers/Microsoft.AppConfiguration/deletedConfigurationStores?api-version=2023-03-01'
          az rest --method post --header "Accept=application/json" -u 'https://management.azure.com/subscriptions/295e777c-2a1b-456a-989e-3c9b15d52a8e/providers/Microsoft.AppConfiguration/locations/${{env.Azure_Resource_GroupLocation}}/deletedConfigurationStores/${{env.APPCS_SoftDeleted}}/purge?api-version=2023-03-01'

    ###########################################
    # Deploy ARM Template using Bicep DSL
    ###########################################
    - name: Infrastructure Deployment
      id: Infra
      uses: azure/arm-deploy@v1
      continue-on-error: false
      with:
        scope: 'resourcegroup'
        resourceGroupName: ${{ env.Azure_Resource_GroupName }}
        template: ./MercuryHealth.IaC/main-1.bicep
        parameters: ./MercuryHealth.IaC/main-1.params.json Deployed_Environment=${{ env.Deployed_Environment }}
        deploymentMode: Incremental
        failOnStdErr: false

    # DB Deploy during IaC
    # Note: the output: steps.Infra.outputs.out_secretConnectionString doesn't transfer to other stages
    ##########################################################
    - name: Download Build Artifact-Database
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.Database
        path: ${{ github.workspace }}/MercuryHealth.Database

    # Deploy Database *.dacpac file
    - name: 'Deploy the database to Azure'
      uses: Azure/sql-action@v1.2
      with:
        server-name: ${{ steps.Infra.outputs.out_sqlserverFQName }}
        connection-string: ${{ steps.Infra.outputs.out_secretConnectionString }}
        dacpac-package: './MercuryHealth.Database/MercuryHealth.Database.dacpac'

    - name: 'Azure logout'
      run: |
        az logout

    - name: Ensure Resource Group is Locked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'

    # Used for Demos only.
    - name: DEBUG ONLY Display Output Variables
      run: |
         echo 'output_loadTestsName: ${{ steps.Infra.outputs.out_loadTestsName }}'
         echo 'output_apiServiceName: ${{ steps.Infra.outputs.out_apiServiceName }}'
         echo 'output_apimSubscriptionKey: ${{ steps.Infra.outputs.out_apimSubscriptionKey }}'
         echo 'output_webSiteName: ${{ steps.Infra.outputs.out_webSiteName }}'
         echo 'output_functionAppName: ${{ steps.Infra.outputs.out_functionAppName }}'
         echo 'output_sqlserverFQName: ${{ steps.Infra.outputs.out_sqlserverFQName }}'
         echo 'output_releaseAnnotationGuidID: ${{ steps.Infra.outputs.out_releaseAnnotationGuidID }}'
         echo 'output_appInsightsApplicationId: ${{ steps.Infra.outputs.out_appInsightsApplicationId }}'
         echo 'output_appInsightsAPIApplicationId: ${{ steps.Infra.outputs.out_appInsightsAPIApplicationId }}'
         echo 'output_keyvaultName: ${{ steps.Infra.outputs.out_keyvaultName }}'
         echo 'output_secretConnectionString: ${{ steps.Infra.outputs.out_secretConnectionString }}'


  ###################################################################
  # Deploy Database
  ###################################################################
  deploy_database:
    runs-on: ubuntu-latest

    name: Deploy Database
    needs: [deploy_infrastructure]
    env:
      Azure_Resource_GroupName: ${{ inputs.resource-group-base-name }}-${{ inputs.environment-suffix }}
      Azure_Resource_GroupLocation: ${{ inputs.resource-group-location}}
  
    permissions:
      contents: read

    # Identify any jobs that must complete successfully before this job will run.
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.azure-credentials }}

    - name: Ensure Resource Group is UnLocked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }}
          
    - name: Download Build Artifact-Database
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.Database
        path: ${{ github.workspace }}/MercuryHealth.Database
    
        # Deploy Database *.dacpac file
    - name: 'Deploy the database to Azure'
      continue-on-error: true
      uses: Azure/sql-action@v1.2
      with:
        server-name: ${{ needs.deploy_infrastructure.outputs.output_sqlserverFQName }}
        connection-string: ${{ needs.deploy_infrastructure.outputs.output_secretConnectionString }}
        dacpac-package: './MercuryHealth.Database/MercuryHealth.Database.dacpac'

     # Used for Demos only.
    - name: Deploy Database
      run: |
         echo 'output_secretConnectionString: ${{ needs.deploy_infrastructure.outputs.output_secretConnectionString }}'
         echo 'output_sqlserverFQName: ${{ needs.deploy_infrastructure.outputs.output_sqlserverFQName }}'

    - name: Ensure Resource Group is Locked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'
   

  ###################################################################
  # Deployment Stage - Application / Database 
  ###################################################################
  deploy_application:
    runs-on: ubuntu-latest
    name: Deploy Application
    needs: [deploy_infrastructure]
    env:
      Azure_Resource_GroupName: ${{ inputs.resource-group-base-name }}-${{ inputs.environment-suffix }}
      Deployed_Environment: ${{ inputs.environment-suffix }}
      url: 'https://${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net/' 

    environment:
      name: Azure #${{ inputs.environment-suffix }}
      url: 'https://${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net/' 
      
    permissions:
      contents: read
    #  packages: write

    # Identify any jobs that must complete successfully before this job will run.
    steps:
 
    # Used for Demos only.      
    - name: DEBUG ONLY Display Output Variables
      run: |
         echo 'output_loadTestsName: ${{ needs.deploy_infrastructure.outputs.output_loadTestsName }}'
         echo 'output_webSiteName: ${{ needs.deploy_infrastructure.outputs.output_webSiteName }}'
         echo 'output_functionAppName: ${{ needs.deploy_infrastructure.outputs.output_functionAppName }}'
         echo 'output_sqlserverFQName: ${{ needs.deploy_infrastructure.outputs.output_sqlserverFQName }}'
         echo 'output_releaseAnnotationGuidID: ${{ needs.deploy_infrastructure.outputs.output_releaseAnnotationGuidID }}'
         echo 'output_appInsightsApplicationId: ${{ needs.deploy_infrastructure.outputs.output_appInsightsApplicationId }}'
         echo 'output_appInsightsAPIApplicationId: ${{ needs.deploy_infrastructure.outputs.output_appInsightsAPIApplicationId }}'
         echo 'output_keyvaultName: ${{ needs.deploy_infrastructure.outputs.output_keyvaultName }}'
         echo 'output_secretConnectionString: ${{ needs.deploy_infrastructure.outputs.output_secretConnectionString }}'
         echo 'output_apiServiceName: ${{ needs.deploy_infrastructure.outputs.output_apiServiceName }}'
         echo 'output_apimSubscriptionKey: ${{ needs.deploy_infrastructure.outputs.output_apimSubscriptionKey }}'

    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.azure-credentials }}

    - name: Ensure Resource Group is UnLocked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }}

    - name: Download Build Artifacts-Website Application
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.Website
        path: ${{ github.workspace }}/MercuryHealth.Website

    - name: 'Deploy Website Application'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ needs.deploy_infrastructure.outputs.output_webSiteName }}
        package: './MercuryHealth.Website'
        #slot-name: ${{ inputs.environment-suffix }}

    - name: Download Build Artifacts-Function Application
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.FunctionApp
        path: ${{ github.workspace }}/MercuryHealth.FunctionApp

    # Deploy Function Application
    - name: 'Deploy Function Application'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ needs.deploy_infrastructure.outputs.output_functionAppName }}
        slot-name: 'production'
        package: './MercuryHealth.FunctionApp'

# Release annotations can be automatically created for Application Insights
# You’re using one of the following Azure DevOps pipeline tasks:
#   AzureAppServiceSettings
#   AzureRmWebAppDeployment
#   AzureFunctionApp
#   AzureFunctionAppContainer
#   AzureWebAppContainer
#   AzureWebApp

# Retiring on 31 August 2024!!!
# Azure Application Insights Release annotations using API keys are retiring on 31 August 2024 #175

    # Used for Demos only.
    # TODO!!!  Removed this and replace using Azure CLI
    # - name: 'Generate Temporary API Key For App Insights'
    #   id: AIKeyGen
    #   uses: Azure/CLI@v1
    #   continue-on-error: true
    #   with:
    #     inlineScript: |
    #       az config set extension.use_dynamic_install=yes_without_prompt
    #       result=$(az monitor app-insights api-key create \
    #                   --api-key ${{ needs.deploy_infrastructure.outputs.output_releaseAnnotationGuidID }} \
    #                   --write-properties WriteAnnotations \
    #                   -g ${{ env.Azure_Resource_GroupName }} \
    #                   --app ${{ needs.deploy_infrastructure.outputs.output_appInsightsApplicationId }} \
    #                   --query "apiKey" --output tsv)
    #       echo "::set-output name=aiKey::$result"
        
    # - name: 'Annotate Deployment'
    #   uses: wictorwilen/application-insights-action@v1
    #   continue-on-error: true
    #   id: annotation
    #   with:
    #     applicationId: ${{ needs.deploy_infrastructure.outputs.output_appInsightsAPIApplicationId }}
    #     apiKey: ${{ steps.AIKeyGen.outputs.aiKey }}
    #     releaseName: ${{ github.event_name }}
    #     message: ${{ github.event.head_commit.message }}
    #     actor: ${{ github.actor }}

    # - name: Remove Temporary API Key For App Insights
    #   uses: Azure/CLI@v1
    #   continue-on-error: true
    #   with:
    #     inlineScript: |
    #       az config set extension.use_dynamic_install=yes_without_prompt
    #       az monitor app-insights api-key delete \
    #                   --api-key ${{ needs.deploy_infrastructure.outputs.output_releaseAnnotationGuidID }} \
    #                   -g ${{ env.Azure_Resource_GroupName }} \
    #                   --app ${{ needs.deploy_infrastructure.outputs.output_appInsightsApplicationId }} 

    - name: Ensure Resource Group is Locked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'

    - name: Perform a Health Check on App Service (check for 60 min max!)
      continue-on-error: false
      run: |
        curl --retry 60 --retry-delay 60 'https://${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net/healthy'
     
    - name: 'Azure logout'
      run: |
        az logout

        
  ###################################################################
  # Conigure DNS and set SSL Certificate
  ###################################################################
  config_dnsandcertificate:
    runs-on: ubuntu-latest
    outputs:
      output_endpointUri: ${{ steps.InfraDNS.outputs.out_endpointUri }}

    name: DNS and SSL Cert
    needs: [deploy_infrastructure]
    env:
      Azure_Resource_GroupName: ${{ inputs.resource-group-base-name }}-${{ inputs.environment-suffix }}
      Azure_Resource_GroupLocation: ${{ inputs.resource-group-location}}
  
    permissions:
      contents: read

    # Identify any jobs that must complete successfully before this job will run.
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.azure-credentials }}

    - name: Ensure Resource Group is UnLocked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }}
          
    - name: Download Build Artifact-Infrastructure
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.IaC
        path: ${{ github.workspace }}/MercuryHealth.IaC

    # Deploy ARM Template using Bicep DSL
    - name: App Service DNS & Certificates
      id: InfraDNS
      uses: azure/arm-deploy@v1
      continue-on-error: true
      with:
        scope: 'resourcegroup'
        resourceGroupName: ${{ env.Azure_Resource_GroupName }}
        template: ./MercuryHealth.IaC/main-2.bicep
        parameters: ./MercuryHealth.IaC/main-2.params.json webSiteName=${{ needs.deploy_infrastructure.outputs.output_webSiteName }} cloudFlareAPIToken=${{ secrets.cloudflare-api-token }} cloudFlareZoneID=${{ secrets.cloudflare-zone-id }} keyvaultName='kv-mercuryhealth-52a8e'
        deploymentMode: Incremental
        failOnStdErr: false

    - name: Ensure Resource Group is Locked
      #if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'

    - name: DEBUG ONLY Display Output Variables
      run: |
         echo 'output_secretConnectionString: ${{ needs.deploy_infrastructure.outputs.output_secretConnectionString }}'
         echo 'output_endpointUri: ${{ steps.InfraDNS.outputs.out_endpointUri }}'


###################################################################
# CD Stage - Playwright Testing                         
###################################################################
  Playwright_Stage_Application:
    #if: contains(github.event_name, 'push')

    name: Playwright Testing
    
    env:
      node_version: '16.x.x'
      buildConfiguration: 'Release'
      website_URL: 'https://${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net/'
      #website_URL: 'http://www.mercuryhealth.org//'

    # The type of runner that the job will run on - windows-latest
    runs-on: ubuntu-latest

    # Identify any jobs that must complete successfully before this job will run.
    #needs: [deploy_infrastructure, deploy_application, deploy_database, config_dnsandcertificate]
    needs: [deploy_infrastructure, deploy_application, deploy_database]
    timeout-minutes: 60
        
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      # Install Playwright browsers and dependencies
      - name: Install Playwright browsers and dependencies
        run: npx playwright install --with-deps

      # Run Playwright tests
      - name: Run Playwright tests
        continue-on-error: true
        run: npx playwright test --reporter=html

      # Upload the Playwright test result artifacts
      - name: Upload Playwright Report Files
        continue-on-error: true
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      # Upload the Playwright test result artifacts
      - name: 'Upload Playwright Screenshot Files'
        continue-on-error: true
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-screenshots
          path: screenshot_*.png
          retention-days: 30

      # Publish HTML report to GitHub Pages to host static HTML report
      - name: Publish HTML report to GitHub Pages
        continue-on-error: true
        if: always() # We want this to always run, even if test fail prior to this step running
        uses: peaceiris/actions-gh-pages@v3.9.3
        with:
          #github_token: ${{ secrets.github-accesstoken }}
          personal_token: ${{ secrets.personal-accesstoken }}
          publish_branch: gh-pages
          publish_dir: playwright-report # This is where index.html will be output
          keep_files: true # Set this to true to make sure we don't wipe out the other content in GitHub Pages
          user_name: 'github-actions[bot]' # This will be the username that gets stamped in the repo commit
          user_email: 'github-actions[bot]@users.noreply.github.com' # This will be the user email that gets stamped in the repo commit

##################################################################
# CD Stage - Load and Performance Testing >>> Home Page          #
##################################################################
  LoadTesting_Stage_Application_APIs:
    # Identify any jobs that must complete successfully before this job will run.
    runs-on: ubuntu-latest
    #if: contains(github.event_name, 'push')
    name: 'Azure Load Testing'   
    env:
      Azure_Resource_GroupName: ${{ inputs.resource-group-base-name }}-${{ inputs.environment-suffix }}
           
    # Identify any jobs that must complete successfully before this job will run.
    #needs: [deploy_infrastructure, deploy_application, UITesting_Stage_Application,Playwright_Stage_Application]
    needs: [deploy_infrastructure, deploy_application, Playwright_Stage_Application]
    steps:
      - name: 'Checkout GitHub Actions'
        uses: actions/checkout@v2

      - name: DEBUG ONLY Display Output Variables
        run: |
           echo 'output_loadTestsName: ${{ needs.deploy_infrastructure.outputs.output_loadTestsName }}'
           echo 'output_apiServiceName: ${{ needs.deploy_infrastructure.outputs.output_apiServiceName }}'
           echo 'env:webapp: ${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net'
           echo 'output_keyvaultName: ${{ needs.deploy_infrastructure.outputs.output_keyvaultName }}'
           
      # Download Artifacts under $GITHUB_WORKSPACE, so your job can access it
      - name: 'Download Build Artifacts-Load Tests'
        uses: actions/download-artifact@v2
        with:
          name: MercuryHealth.LoadTests
          path: ${{ github.workspace }}/MercuryHealth.LoadTests
          
      - name: 'Login to Azure'
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.azure-credentials }}

      - name: 'Get Key Vault Value'
        id: GetAPIMKey
        uses: Azure/CLI@v1
        continue-on-error: true
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            result=$(az keyvault secret show \
                        --name "ApimSubscriptionKey" \
                        --vault-name "${{ needs.deploy_infrastructure.outputs.output_keyvaultName }}" \
                        --query "value" --output tsv)
            echo "::set-output name=apimKey::$result"
            echo "apimKey = ${$apimKey}"

      - name: DEBUG ONLY Display Key Vault Secret
        run: |
           echo 'apimKey: ${{ steps.GetAPIMKey.outputs.apimKey }}'

      # Testing the Web App API. Do not use end slash for webHost value. "/"
      - name: 'Azure Load Testing, API'
        uses: azure/load-testing@v1
        continue-on-error: true
        with:
          loadtestConfigFile: './MercuryHealth.LoadTests/API_Testing.yaml'
          loadtestResource: ${{needs.deploy_infrastructure.outputs.output_loadTestsName}}
          resourceGroup: ${{ env.Azure_Resource_GroupName }}
          env: |
            [
               {
                 "name": "webapp",
                 "value": "${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net"
               }
            ]
          secrets: |
            [
              {
                "name": "appToken",
                "value": "${{ steps.GetAPIMKey.outputs.apimKey }}"
              }
            ]

      # Testing the Web App API. Do not use end slash for webHost value. "/"
      - name: 'Azure Load Testing, APIM'
        uses: azure/load-testing@v1
        continue-on-error: true
        with:
          loadtestConfigFile: './MercuryHealth.LoadTests/APIM_Testing.yaml'
          loadtestResource: ${{needs.deploy_infrastructure.outputs.output_loadTestsName}}
          resourceGroup: ${{ env.Azure_Resource_GroupName }}
          env: |
            [
               {
                 "name": "webapp",
                 "value": "${{needs.deploy_infrastructure.outputs.output_apiServiceName}}.azure-api.net"
               }
            ]
          secrets: |
            [
              {
                "name": "appToken",
                "value": "${{ steps.GetAPIMKey.outputs.apimKey }}"
              }
            ]

      # - name: 'Upload Load Test Results'
      #   uses: actions/upload-artifact@v2
      #   continue-on-error: true
      #   with:
      #     name: MercuryHealth.LoadTestsResults
      #     path: ${{ github.workspace }}/MercuryHealth.LoadTests
      #     retention-days: 30
          
      - name: 'Azure logout'
        run: |
          az logout

###################################################################
# CD Stage - Dev  
###################################################################
  Approval_Stage_Application:
    #if: contains(github.event_name, 'push') && (inputs.approval-required == true) && always()
    if: (inputs.approval-required == true) && always()

    name: Approve Deployment
    
    # Identify any jobs that must complete successfully before this job will run.
    runs-on: ubuntu-latest

    # Identify any jobs that must complete successfully before this job will run.
    #needs: [UITesting_Stage_Application, LoadTesting_Stage_Application_Home, LoadTesting_Stage_Application_Nutrition, LoadTesting_Stage_Application_Exercise]
    needs: [LoadTesting_Stage_Application_APIs, deploy_infrastructure ]
    environment:
      name: ${{ inputs.environment-suffix }}
      url: ${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net
    steps:
      - name: Approve Deployment
        run: |
          echo 'Approve Deployment'


###################################################################
###################################################################
###################################################################



###################################################################
# Swap Deployment Slots - Used for Multiple App Service Deployment Slots                         
###################################################################
  # Approval_Stage_SwapSlots:
  #   #if: contains(github.event_name, 'push')

  #   name: Deploy to Prod
    
  #   env:
  #     dotnet_version: '6.x.x'
  #     buildConfiguration: 'Release'

  #   # The type of runner that the job will run on - windows-latest
  #   runs-on: ubuntu-latest

  #   # Identify any jobs that must complete successfully before this job will run.
  #   needs: [deploy_infrastructure, Approval_Stage_Application]
  #   timeout-minutes: 10
    
  #   steps:
  #     - name: Swap Slots
  #       run: |
  #         az webapp deployment slot swap 
  #         --resource-group ${{ inputs.resource-group-base-name }}
  #         --name ${{needs.deploy_infrastructure.outputs.output_webSiteName}}
  #         --slot ${{ inputs.environment-suffix }}
  #         --target-slot 'prod'

###################################################################
# CD Stage - UI Testing                         
###################################################################
  # UITesting_Stage_Application:
  #   #if: contains(github.event_name, 'push')

  #   name: Playwright C#
    
  #   env:
  #     dotnet_version: '6.x.x'
  #     buildConfiguration: 'Release'

  #   # The type of runner that the job will run on - windows-latest
  #   runs-on: ubuntu-latest

  #   # Identify any jobs that must complete successfully before this job will run.
  #   needs: [deploy_infrastructure, deploy_application, deploy_database]
  #   timeout-minutes: 10
        
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout
  #       uses: actions/checkout@v2
      
  #     - name: Setup .NET Core
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ env.dotnet_version }}

  #     - name: DEBUG ONLY Display Output Variables
  #       run: |
  #          echo 'output_webSiteName: ${{ needs.deploy_infrastructure.outputs.output_webSiteName }}'
         
  #     # Download Artifacts under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Download Build Artifacts-Playwright Tests
  #       continue-on-error: false
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: MercuryHealth.UITests
  #         path: ${{ github.workspace }}/MercuryHealth.UITests

  #     # Update Runsettings with Website URL
  #     - name: Update Runsettings with Website URL
  #       uses: Azure/powershell@v1
  #       continue-on-error: false
  #       id: setWebsiteUrl
  #       env:
  #         POWERSHELL_TELEMETRY_OPTOUT: 1
  #       with:
  #         inlineScript: MercuryHealth.UITests/TransformRunSettings.ps1 -website_url 'https://${{needs.deploy_infrastructure.outputs.output_webSiteName}}.azurewebsites.net/'
  #         # Azure PS version to be used to execute the script, example: 1.8.0, 2.8.0, 3.4.0. To use the latest version, specify "latest".
  #         azPSVersion: 3.4.0
  #         # Select the value of the ErrorActionPreference variable for executing the script. Options: stop, continue, silentlyContinue. Default is Stop.
  #         errorActionPreference: continue

  #     - name: Playwright Tests all on Browsers
  #       continue-on-error: true
  #       run: |
  #        dotnet build MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }}
  #        dotnet publish MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }} -o './MercuryHealth.UITests'
  #        dotnet test MercuryHealth.UITests/MercuryHealth.UITests.csproj --filter "TestCategory=Playwright_Tests_Chromium|TestCategory=Playwright_Tests_FireFox" -l "console;verbosity=normal" -l "trx;LogFileName=TestResults.trx" --settings MercuryHealth.UITests/MercuryHealthTests.runsettings

  #     # Upload the test result artifacts
  #     - name: 'Upload Playwright Screenshot Files'
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: playwright-screenshots-C#
  #         path: ${{ github.workspace }}/MercuryHealth.UITests/bin/Debug/net6.0/screenshot_*.png
  #         retention-days: 30

  #     # Upload the test result artifacts
  #     - name: 'Upload Playwright Trace Files'
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: playwright-report-C#
  #         path: ${{ github.workspace }}/MercuryHealth.UITests/bin/Debug/net6.0/trace_*.zip
  #         retention-days: 30
          


