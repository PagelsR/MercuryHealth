name: Deploy TLS/SSL Binding to Azure Web App

on:
# Triggers the workflow on push or pull request events but only for the master branch
#push:
#  branches: [ main ]

# Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Upload Infrastucture Files
    #   if: ${{ github.event_name != 'pull_request' }}
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: MercuryHealth.IaC
    #     path: ${{ github.workspace }}/MercuryHealth.IaC/*.*

    # - name: Download Build Artifact-Infrastructure
    #   uses: actions/download-artifact@v2
    #   continue-on-error: false
    #   with:
    #     name: MercuryHealth.IaC
    #     path: ${{ github.workspace }}/MercuryHealth.IaC

    - name: Generate PFX certificate
      run: |
        echo "${{ secrets.CLOUDFLARE_KEY }}" > private.key
        echo "${{ secrets.CLOUDFLARE_CRT }}" > certificate.crt
        certificate_password=${{ secrets.CLOUDFLARE_CERTIFICATE_PASSWORD }}
        openssl pkcs12 -export -out certificate.pfx -inkey private.key -in certificate.crt -password "pass:$certificate_password"

    # - name: Generate Certificate Thumbprint
    #   run: |
    #     thumbprint=$(openssl x509 -noout -fingerprint -in certificate.crt -sha1 | awk -F'=' '{print $2}' | sed 's/://g')
    #     echo "THUMBPRINT=$thumbprint" >> $GITHUB_ENV

    - name: Install jq Tooling
      run: sudo apt-get update && sudo apt-get install jq -y

    - name: Get Cloudflare DNS Records
      run: |
        echo "Getting all DNS records from Cloudflare..."
        cloudFlareKey=${{ secrets.CLOUDFLARE_API_TOKEN }}
        cloudFlareEmail='pagelsr@live.com'
        cloudFlareZone=${{ secrets.CLOUDFLARE_ZONE_ID }}

        listDnsResult=$(az rest --method GET \
          --uri "https://api.cloudflare.com/client/v4/zones/$cloudFlareZone/dns_records" \
          --headers "X-Auth-Key: $cloudFlareKey" "X-Auth-Email: $cloudFlareEmail" \
          --query 'result')

        echo "$listDnsResult"
        echo "Done getting all DNS records"

        numEntries=$(echo "$listDnsResult" | jq length)
        echo "Number of DNS entries: $numEntries"
        echo ""

    - name: 'uploading certificate, getting thumbprint'
      id: GetThumbprint
      uses: Azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt
          thumbprint=$(az webapp config ssl upload \
            --name 'app-okhgzqoexg6jy' \
            --resource-group 'rg-MercuryHealth-dev' \
            --certificate-file certificate.pfx \
            --certificate-password '${{ secrets.CLOUDFLARE_CERTIFICATE_PASSWORD }}' \
            --query thumbprint \
            --output tsv)
          echo "::set-output name=CertThumbprint::$thumbprint"

    - name: 'adding custom domain'
      uses: Azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az webapp config hostname add \
          --webapp-name 'app-okhgzqoexg6jy' \
          --resource-group 'rg-MercuryHealth-dev' \
          --hostname 'mercuryhealthtest.org'

    - name: 'adding certificate'
      uses: Azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az webapp config hostname add \
          --webapp-name 'app-okhgzqoexg6jy' \
          --resource-group 'rg-MercuryHealth-dev' \
          --certificate-thumbprint '${{ steps.GetThumbprint.outputs.CertThumbprint }}' \
          --ssl-type SNI

    # - name: Upload SSL certificate to Azure Web App
    #   run: |
    #     webappname='app-okhgzqoexg6jy'
    #     resourcegroup='rg-MercuryHealth-dev'
    #     pfxfile=certificate.pfx
    #     password=${{ secrets.CLOUDFLARE_CERTIFICATE_PASSWORD }}
    #     thumbprint=$(openssl x509 -noout -fingerprint -in certificate.crt -sha1 | awk -F'=' '{print $2}' | sed 's/://g')

    #     # Upload SSL certificate
    #     az webapp config ssl upload \
    #       --name $webappname \
    #       --resource-group $resourcegroup \
    #       --certificate-file $pfxfile \
    #       --certificate-password $password

    #     # Bind SSL certificate
    #     az webapp config ssl bind \
    #       --name $webappname \
    #       --resource-group $resourcegroup \
    #       --certificate-thumbprint $thumbprint \
    #       --ssl-type SNI

    #
    # Try these already!
    #
    # - name: Deploy SSL certificate to Azure Web App
    #   run: |
    #     webappname='app-okhgzqoexg6jy'
    #     certificate_password=${{ secrets.CLOUDFLARE_CERTIFICATE_PASSWORD }}
    #     az webapp config ssl upload \
    #       --name $webappname \
    #       --resource-group 'rg-MercuryHealth-dev' \
    #       --certificate-file certificate.pfx \
    #       --certificate-password $certificate_password

    # # ${{ github.workspace }}/webapp-ssl-deployment.bicep
    # # ERROR: An error occurred reading file. Could not find file '/home/runner/work/MercuryHealth/MercuryHealth/webapp-ssl-deployment.bicep'
    # - name: Deploy Bicep Template
    #   run: |
    #     az deployment group create \
    #       --resource-group 'rg-MercuryHealth-dev' \
    #       --template-file ./MercuryHealth.IaC/webapp-ssl-deployment.bicep \
    #       --parameters webAppName='app-okhgzqoexg6jy' resourceGroupName='rg-MercuryHealth-dev' \
    #       certificatePfx=@certificate.pfx certificatePassword=${{ secrets.CLOUDFLARE_CERTIFICATE_PASSWORD }} \
    #       certificateThumbprint=${{ env.THUMBPRINT }}

    # - name: Deploy Bicep Template
    #   uses: azure/arm-deploy@v1
    #   continue-on-error: false
    #   with:
    #     scope: 'resourcegroup'
    #     resourceGroupName: 'rg-MercuryHealth-dev'
    #     template: ./MercuryHealth.IaCwebapp-ssl-deployment.bicep
    #     parameters: ./MercuryHealth.IaC/main-1.params.json Deployed_Environment=${{ env.Deployed_Environment }}
    #     deploymentMode: Incremental
    #     failOnStdErr: false          